<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:metadata="http://www.mulesoft.org/schema/mule/metadata" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw"
	xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd">

	<flow name="get:/report/ams:api-config">
        <set-variable variableName="description" value="Get all registered assets for a content provider within a specific period from AMS" doc:name="Set description"/>
        <set-variable variableName="cp_ldap" value="#[message.inboundProperties.'http.query.params'.cp == null || message.inboundProperties.'http.query.params'.cp.toString().isEmpty() ? &quot;%&quot; : message.inboundProperties.'http.query.params'.cp]" doc:name="Set cp_ldap (LDAP ID)"/>
        <choice doc:name="cp_ldap is empty?">
            <when expression="#[flowVars.cp_ldap!=null &amp;&amp; flowVars.cp_ldap!='null' &amp;&amp; flowVars.cp_ldap != 'OR-w66976m']">
                <set-variable variableName="query_ams_organization_ids" value="#['SELECT id FROM ']${ams.db.organizations}#[' WHERE noid_id = \'' + flowVars.cp_ldap + '\'']" doc:name="Set query_ams_organization_ids"/>
                <logger message="Retrieving global stats: #[flowVars.cp_ldap]" level="INFO" doc:name="Retrieving global stats for an cp"/>
            </when>
            <otherwise>
                <set-variable variableName="query_ams_organization_ids" value="#['SELECT id FROM ']${ams.db.organizations}" doc:name="Set query_ams_organization_ids to every organization"/>
                <set-variable variableName="cp_ldap" value="#['%']" doc:name="Set cp_ldap to %"/>
            </otherwise>
        </choice>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'all-time':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
<!--         <ee:cache cachingStrategy-ref="Caching_AMS" doc:name="Cache"> -->
            <choice doc:name="Last-day, last-week, last-month, last-year or all-time?">
            	<when expression="#[flowVars.granularity.equals('all-time')]">
                    <logger message="all-time = no start and end" level="INFO" doc:name="all-time = no start and end"/>
                    <flow-ref name="db:/report/ams-registered-all-time" doc:name="db:/report/ams-registered-all-time"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-year')]">
                    <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                    <flow-ref name="db:/report/ams-registered-last-year" doc:name="db:/report/ams-registered-last-year"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-month')]">
                    <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                    <flow-ref name="db:/report/ams-registered-last-month" doc:name="db:/report/ams-registered-last-month"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-week')]">
                    <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                    <set-variable variableName="start" value="#[server.dateTime.getDate().plusWeeks(-1).toString()]" doc:name="Set start (now() - 1 week)"/>
                    <flow-ref name="db:/report/ams-registered-last-week" doc:name="db:/report/ams-registered-last-week"/>
                </when>
                <otherwise>
                    <logger message="Bad granularity, use al-time, last-year, last-month, last-week" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
                </otherwise>
            </choice>
<!--         </ee:cache> -->
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
lookup("create_response",
	{
	"total":
		(payload map (
				{
					"x": $.x,
					"y": $.total_registered
				}
		)),
	"audio": 
		(payload map (
				{
					"x": $.x,
					"y": $.audio_registered
				}
		)),
	"video": 
		(payload map (
				{
					"x": $.x,
					"y": $.video_registered
				}
		)),
	"paper": 
		(payload map (
				{
					"x": $.x,
					"y": $.paper_registered
				}
		)),
	"film": 
		(payload map (
				{
					"x": $.x,
					"y": $.film_registered
				}
		))
	}
)]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>

	<flow name="get:/report/mam:api-config">
        <set-variable variableName="description" value="Get all archived assets for a content provider within a specific period from MAM" doc:name="Set description"/>
        <set-variable variableName="cp_ldap" value="#[message.inboundProperties.'http.query.params'.cp]" doc:name="Set cp_ldap (LDAP ID)"/>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'all-time':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
        <choice doc:name="cp_ldap is empty and not viaa?">
            <when expression="#[flowVars.cp_ldap!=null &amp;&amp; flowVars.cp_ldap!='null'&amp;&amp;flowVars.cp_ldap!='OR-w66976m']">
                <flow-ref name="ldap2mam" doc:name="ldap2mam"/>
            </when>
            <otherwise>
                <set-variable variableName="cp_mam" value="#['%']" doc:name="Set cp_mam (default %)"/>
            </otherwise>
        </choice>
<!--         <ee:cache cachingStrategy-ref="Caching_MAM" doc:name="Cache"> -->
            <choice doc:name="Last-day, last-week, last-month, last-year or all-time?">
	            <when expression="#[flowVars.granularity.equals('all-time')]">
	                <logger message="all-time = no start" level="INFO" doc:name="all-time = no start and end"/>
                    <flow-ref name="db:/report/mam" doc:name="db:/report/mam"/>
	                </when>
                <when expression="#[flowVars.granularity.equals('last-year')]">
                    <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                    <set-variable variableName="start" value="#[dw('(now - |P1Y|) as :date {format: &quot;yyyy-MM-dd&quot;}')]" doc:name="Set start (now() - 1 year)"/>
                    <flow-ref name="db:/report/mam-created" doc:name="db:/report/mam-created"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-month')]">
                    <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                    <set-variable variableName="start" value="#[dw('(now - |P30D|) as :date {format: &quot;yyyy-MM-dd&quot;}')]" doc:name="Set start (now() - 1 month)"/>
                    <flow-ref name="db:/report/mam-created" doc:name="db:/report/mam-created"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-week')]">
                    <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                    <set-variable variableName="start" value="#[dw('(now - |P7D|) as :date {format: &quot;yyyy-MM-dd&quot;}')]" doc:name="Set start (now() - 1 week)"/>
                    <flow-ref name="db:/report/mam-created" doc:name="db:/report/mam-created"/>
                </when>
                <when expression="#[flowVars.granularity.equals('last-day')]">
                    <logger message="Live data" level="INFO" doc:name="Last day = 24 hours for every 1 hour"/>
                    <set-variable variableName="start" value="#[dw('(now - |P1D|) as :date {format: &quot;yyyy-MM-dd&quot;}')]" doc:name="Set start (now() - 1 day)"/>
                    <flow-ref name="db:/report/mam-created" doc:name="db:/report/mam-created"/>
                </when>
                <otherwise>
                    <logger message="Bad granularity, use live-data, 2-days, 1-month or 1-year" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
                </otherwise>
            </choice>
<!--         </ee:cache> -->
        <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
lookup("create_response", 
	{
	"items":
		(payload map (
				{
					"x": $.x,
					"y": $.items
				}
		)),
	"bytes": 
		(payload map (
				{
					"x": $.x,
					"y": $.bytes
				}
		))
}
)]]></dw:set-payload>
        </dw:transform-message>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>

	<flow name="get:/report/global:api-config" >
        <set-variable variableName="description" value="Create a global report for a content provider" doc:name="Set description"/>
        <set-variable variableName="cp_ldap" value="#[message.inboundProperties.'http.query.params'.cp]" doc:name="Set cp_ldap (LDAP ID)"/>
        <choice doc:name="cp_ldap is empty or is VIAA?">
            <when expression="#[flowVars.cp_ldap!=null &amp;&amp; flowVars.cp_ldap!='null'&amp;&amp;flowVars.cp_ldap!='OR-w66976m']">
                <set-payload value="#[flowVars.cp_ldap]" doc:name="Set Payload"/>
                <enricher  target="#[flowVars.cp_mam]" doc:name="Message Enricher">
                    <flow-ref name="ldap2mam" doc:name="ldap2mam"/>
                </enricher>
                <logger message="Retrieving global stats: #[flowVars.cp_ldap]" level="INFO" doc:name="Retrieving global stats for an cp"/>
            </when>
            <otherwise>
                <set-variable variableName="cp_mam" value="#[&quot;%&quot;]" doc:name="Set cp_mam as %"/>
                <set-variable variableName="cp_ldap" value="#[&quot;%&quot;]" doc:name="Set cp_ldap to %"/>
            </otherwise>
        </choice>
<!--         <enricher doc:name="Message Enricher" target="#[payload]"> -->
<!--         	<ee:cache cachingStrategy-ref="Caching_global" doc:name="Cache"> -->
            <scatter-gather doc:name="Scatter-Gather">
                <threading-profile poolExhaustedAction="RUN"/>
                <processor-chain>
                    <expression-component doc:name="Sleep 20"><![CDATA[Thread.sleep(20);]]></expression-component>
                    <logger message="Start AMS registered" level="INFO" doc:name="Logger"/>
                    <flow-ref name="db:/report/global/ams/registered" doc:name="db:/report/global/ams/registered"/>
                    <logger message="AMS registered done" level="INFO" doc:name="Logger"/>
                </processor-chain>
                <processor-chain>
                    <logger message="start MAM" level="INFO" doc:name="Logger"/>
                    <flow-ref name="db:/report/global/mam" doc:name="db:/report/global/mam"/>
                    <flow-ref name="CalcAndAddMAMTotal" doc:name="CalcAndAddMAMTotal"/>
                    <logger message="MAM done" level="INFO" doc:name="Logger"/>
                </processor-chain>
                <processor-chain>
                    <expression-component doc:name="Sleep 40"><![CDATA[Thread.sleep(40);]]></expression-component>
                    <logger message="Start AMS digitised" level="INFO" doc:name="Logger"/>
                    <flow-ref name="db:/report/global/ams/digitized" doc:name="db:/report/global/ams/digitized"/>
                    <logger message="AMS digitised av done" level="INFO" doc:name="Logger"/>
                </processor-chain>
            </scatter-gather>
                <choice doc:name="When VIAA/admin, add specific projects that are not in AMS">
                    <when expression="#[flowVars.cp_ldap!=null &amp;&amp; flowVars.cp_ldap!='null'&amp;&amp;flowVars.cp_ldap!='OR-w66976m'&amp;&amp;flowVars.cp_ldap!='OR-rf5kf25'&amp;&amp;flowVars.cp_ldap!='%']">
                        <expression-component doc:name="Expression"><![CDATA[// do nothing]]></expression-component>
                    </when>
                    <otherwise>
                        <expression-component doc:name="Add Golf 1 betacam SP/SX VRT count to registered and digitized (afgerond)"><![CDATA[payload[0][0].video_registered += 57023;
payload[0][0].total_registered += 57023;
payload[2][0].video_digitised_ok += 57023;
payload[2][0].total_digitised_ok += 57023;]]></expression-component>
                        <expression-component doc:name="Add Golf 2 CDR VRT count to registered and digitized (afgerond)"><![CDATA[payload[0][0].audio_registered += 14246;
payload[0][0].total_registered += 14246;
payload[2][0].audio_digitised_ok += 14246;
payload[2][0].total_digitised_ok += 14246;]]></expression-component>
                        <expression-component doc:name="Add Film VRT to registered and digitized (loopt nog!)"><![CDATA[payload[0][0].film_registered += 25697;
payload[0][0].total_registered += 25697;
payload[2][0].film_digitised_ok += 0;
payload[2][0].total_digitised_ok += 0;]]></expression-component>
                        <expression-component doc:name="Add VHS VRT (afgerond)"><![CDATA[payload[0][0].video_registered += 47046;
payload[0][0].total_registered += 47046;
payload[2][0].video_digitised_ok += 47046;
payload[2][0].total_digitised_ok += 47046;]]></expression-component>
                    </otherwise>
                </choice>
<!--         </ee:cache> -->
<!--         </enricher> -->
        <dw:transform-message doc:name="Set mam_per_type" metadata:id="61485828-332a-454d-b2d7-e517643c5df3">
            <dw:input-payload doc:sample="sample_data/MyPojo.dwl"/>
            <dw:set-variable variableName="mam_per_type"><![CDATA[%dw 1.0
%output application/java
---
{(payload[1] map using (type = $.type) (
    '$type': (
        $ mapObject { ('$$':$) }
    )
))}]]></dw:set-variable>
        </dw:transform-message>
        <expression-component doc:name="Add bytes to film"><![CDATA[if (flowVars.mam_per_type.film != null) {
if (flowVars.mam_per_type.film_dpx != null) {
	flowVars.mam_per_type.film.archived_bytes_ok += flowVars.mam_per_type.film_dpx.archived_bytes_ok;
	flowVars.mam_per_type.film.archived_bytes_nok +=  flowVars.mam_per_type.film_dpx.archived_bytes_nok;
}

if (flowVars.mam_per_type.film_wav != null) {
	flowVars.mam_per_type.film.archived_bytes_ok += flowVars.mam_per_type.film_wav.archived_bytes_ok;
	flowVars.mam_per_type.film.archived_bytes_nok +=  flowVars.mam_per_type.film_wav.archived_bytes_nok;
}

if (flowVars.mam_per_type.film_mezanine != null) {
	flowVars.mam_per_type.film.archived_bytes_ok += flowVars.mam_per_type.film_mezanine.archived_bytes_ok;
	flowVars.mam_per_type.film.archived_bytes_nok +=  flowVars.mam_per_type.film_mezanine.archived_bytes_nok;
}
}]]></expression-component>
        <expression-component doc:name="Add bytes to newspaper"><![CDATA[if (flowVars.mam_per_type.newspaper != null) {
	if (flowVars.mam_per_type.newspaperpage != null) {
		flowVars.mam_per_type.newspaper.archived_bytes_ok += flowVars.mam_per_type.newspaperpage.archived_bytes_ok;
		flowVars.mam_per_type.newspaper.archived_bytes_nok +=  flowVars.mam_per_type.newspaperpage.archived_bytes_nok;
	}
}]]></expression-component>
        <expression-component doc:name="Add bytes to audio (for shellac disks)"><![CDATA[if (flowVars.mam_per_type.audio != null) {
	if (flowVars.mam_per_type.audio_plaat != null) {
		flowVars.mam_per_type.audio.archived_bytes_ok += flowVars.mam_per_type.audio_plaat.archived_bytes_ok;
		flowVars.mam_per_type.audio.archived_bytes_nok +=  flowVars.mam_per_type.audio_plaat.archived_bytes_nok;
	}
}]]></expression-component>
        <expression-component doc:name="Remove film_dpx, film_wav, film_mezanine, newspaperpage, metadataonly, set, audio_plaat"><![CDATA[flowVars.mam_per_type.remove('film_dpx');
flowVars.mam_per_type.remove('film_wav');
flowVars.mam_per_type.remove('film_mezanine');
flowVars.mam_per_type.remove('newspaperpage');
flowVars.mam_per_type.remove('metadataonly');
flowVars.mam_per_type.remove('set');
flowVars.mam_per_type.remove('audio_plaat');]]></expression-component>
                <expression-component doc:name="Add AMS and MAM as source"><![CDATA[if (flowVars.sources == null) {
	flowVars.sources = new java.util.ArrayList();
}

if (!flowVars.sources.contains("AMS")) {
	flowVars.sources.add("AMS");
}

if (!flowVars.sources.contains("MAM")) {
	flowVars.sources.add("MAM");
}]]></expression-component>
        <dw:transform-message doc:name="Build nice JSON object" metadata:id="58215c86-7375-4c66-991a-a2c0c303fc28">
            <dw:input-payload doc:sample="sample_data/map.dwl"/>
            <dw:input-variable doc:sample="sample_data/string.dwl" mimeType="application/java" variableName="mam_per_type"/>
            <dw:set-payload><![CDATA[%dw 1.0
%function zero(n) n when n!=null otherwise 0
%output application/json
---
lookup("create_response", 
	{
	"registered": {
		"video": zero(payload[0][0].video_registered),
		"audio": zero(payload[0][0].audio_registered),
		"film": zero(payload[0][0].film_registered),	
		"paper": zero(payload[0][0].paper_registered),
		"total": zero(payload[0][0].total_registered)
	},
	"digitised": {
		"video": {
			"ok": zero(payload[2][0].video_digitised_ok),
			"nok": zero(payload[2][0].video_digitised_nok),
			"registered_and_not_digitised": zero(payload[2][0].video_registered_and_not_digitised)
		},
		"audio": {
			"ok": zero(payload[2][0].audio_digitised_ok),
			"nok": zero(payload[2][0].audio_digitised_nok),
			"registered_and_not_digitised": zero(payload[2][0].audio_registered_and_not_digitised)
		},
		"film": {
			"ok": zero(payload[2][0].film_digitised_ok),
			"nok": zero(payload[2][0].film_digitised_nok),
			"registered_and_not_digitised": zero(payload[2][0].film_registered_and_not_digitised)
		},
		"paper": {
			"ok": zero(payload[2][0].paper_digitised_ok),
			"nok": zero(payload[2][0].paper_digitised_nok)
		},
		"total": {
			"ok": zero(payload[2][0].video_digitised_ok) + zero(payload[2][0].audio_digitised_ok) + zero(payload[2][0].film_digitised_ok) + zero(payload[2][0].paper_digitised_ok),
			"nok": zero(payload[2][0].video_digitised_nok) + zero(payload[2][0].audio_digitised_nok) + zero(payload[2][0].film_digitised_nok)
		}
	},
	"archived": { (flowVars.mam_per_type map (
			{
				($.type): {
					"amount": {
						"ok": zero($.archived_amount_ok),
						"nok": zero($.archived_amount_nok)
					},
					"bytes": {
						"ok": zero($.archived_bytes_ok),
						"nok": zero($.archived_bytes_nok)
					}
				}
			} when $.type != null 
			otherwise {
				"unknown": {
					"amount": {
						"ok": zero($.archived_amount_ok),
						"nok": zero($.archived_amount_nok)
					},
					"bytes": {
						"ok": zero($.archived_bytes_ok),
						"nok": zero($.archived_bytes_nok)
					}
				}
			} 
			))
	}
}
)]]></dw:set-payload>
        </dw:transform-message>
    </flow>
	
</mule>
 