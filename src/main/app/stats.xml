<?xml version="1.0" encoding="UTF-8"?>
 
<mule xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:context="http://www.springframework.org/schema/context" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:vm="http://www.mulesoft.org/schema/mule/vm" xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:spring="http://www.springframework.org/schema/beans"  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/current/mule-scripting.xsd
http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/current/mule-vm.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-current.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd">
    <http:listener-config name="HTTP_Listener_Configuration" host="0.0.0.0" port="${api.port}" doc:name="HTTP Listener Configuration"/>
    <db:generic-config name="Mediahaven_monitoring" url="jdbc:postgresql://${mam.db.host}:${mam.db.port}/${mam.db.database}?password=${mam.db.password}&amp;user=${mam.db.username}" driverClassName="org.postgresql.Driver" doc:name="MH monitoring DB"> 
        <reconnect-forever></reconnect-forever>  
    </db:generic-config>
    <db:generic-config name="AMS_MySQL" url="jdbc:mysql://${ams.db.host}:${ams.db.port}/${ams.db.database}?password=${ams.db.password}&amp;user=${ams.db.username}" driverClassName="com.mysql.jdbc.Driver" doc:name="AMS DB"> 
        <reconnect-forever></reconnect-forever>  
    </db:generic-config>
    <context:property-placeholder location="${mule.env}.properties"/>
<!--     <db:mysql-config name="AMS_MySQL" host="${ams.db.host}" port="${ams.db.port}" user="${ams.db.username}" password="${ams.db.password}" database="${ams.db.database}" doc:name="MySQL Configuration"> -->
<!--         <reconnect-forever/> -->
<!--     </db:mysql-config> -->
    <flow name="GlobalStats">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/report/global" doc:name="/api/report/global?cp={c}" allowedMethods="GET"/>
        <set-variable variableName="cp_ldap" value="#[message.inboundProperties.'http.query.params'.org]" doc:name="Set cp_ldap (LDAP ID) (default: OR-rf5kf25 = VRT)"/>
        <choice doc:name="cp_ldap is empty?">
            <when expression="#[flowVars.cp_ldap!=null]">
                <logger level="INFO" doc:name="TODO: fetch content_provider MAM from LDAP ID"/>
                <set-variable variableName="cp_mam" value="#['VRT']" doc:name="Set cp_mam (default VRT)"/>
                <set-variable variableName="query_ams_organization_ids" value="#['SELECT id FROM ']${ams.db.organizations}#[' WHERE noid_id LIKE \'' + flowVars.cp_ldap + '\'']" doc:name="Set query_ams_organization_ids"/>
                <set-variable variableName="where_clausule_mam_content_provider" value="#['AND content_provider = ' + flowVars.cp_mam]" doc:name="Set where_clausule_mam_content_provider"/>
                <logger message="#[Retrieving global stats: flowVars.cp]" level="INFO" doc:name="Retrieving global stats for an cp"/>
            </when>
            <otherwise>
                <set-variable variableName="where_clausule_mam_content_provider" value="#['']" doc:name="Set where_clausule_mam_content_provider as empty"/>
                <set-variable variableName="query_ams_organization_ids" value="#['SELECT id FROM ']${ams.db.organizations}" doc:name="Set query_ams_organization_ids to every organization"/>
            </otherwise>
        </choice>
        <scatter-gather doc:name="Scatter-Gather">
            <threading-profile poolExhaustedAction="RUN"/>
            <processor-chain>
                <expression-component doc:name="Sleep 20"><![CDATA[Thread.sleep(20);]]></expression-component>
                <logger message="Start AMS registered" level="INFO" doc:name="Logger"/>
<db:select config-ref="AMS_MySQL" doc:name="AMS: Fetch amount registered">
                    <db:dynamic-query><![CDATA[SELECT count(1) total_registered,
sum(case when carrier_type_id = 1 then 1 else 0 end) audio_registered,
sum(case when carrier_type_id = 2 then 1 else 0 end) video_registered,
sum(case when carrier_type_id = 3 then 1 else 0 end) paper_registered,
sum(case when carrier_type_id = 4 then 1 else 0 end) film_registered
FROM ${ams.db.carrier}
WHERE organization_id IN (
	#[flowVars.query_ams_organization_ids]
)]]></db:dynamic-query>
        </db:select>
                <logger message="AMS registered done" level="INFO" doc:name="Logger"/>
            </processor-chain>
            <processor-chain>
                <logger message="start MAM" level="INFO" doc:name="Logger"/>
<db:select config-ref="Mediahaven_monitoring" doc:name="MAM: Fetch amount and bytes for every mime_type">
                    <db:dynamic-query><![CDATA[SELECT case when mime_type LIKE '%video%' then 'video' else mime_type end mime_type, 
count(case when status = 'OK' then 1 end) archived_amount_ok, 
sum(case when status = 'OK' and carrier_size is not null then carrier_size else 0 end) archived_bytes_ok,
count(case when status = 'NOK' then 1 end) archived_amount_nok, 
sum(case when status = 'NOK' and carrier_size is not null then carrier_size else 0 end) archived_bytes_nok
FROM ${mam.db.datatable.pids}
WHERE status IN ('OK', 'NOK') #[flowVars.where_clausule_mam_content_provider]
GROUP BY case when mime_type LIKE '%video%' then 'video' else mime_type end]]></db:dynamic-query>
        </db:select>
                <flow-ref name="CalcAndAddMAMTotal" doc:name="CalcAndAddMAMTotal"/>
                
                <logger message="MAM done" level="INFO" doc:name="Logger"/>
            </processor-chain>
            <processor-chain>
                <expression-component doc:name="Sleep 40"><![CDATA[Thread.sleep(40);]]></expression-component>
                <logger message="Start AMS digitised" level="INFO" doc:name="Logger"/>
<db:select config-ref="AMS_MySQL" doc:name="AMS: Fetch amount digitised for audio, video and film">
                    <db:dynamic-query><![CDATA[select sum(case when e.event_outcome = 1 and c.carrier_type_id = 1 then 1 else 0 end) audio_digitised_ok,
sum(case when e.event_outcome = 0 and c.carrier_type_id = 1 then 1 else 0 end) audio_digitised_nok,
sum(case when e.event_outcome = 1 and c.carrier_type_id = 2 then 1 else 0 end) video_digitised_ok,
sum(case when e.event_outcome = 0 and c.carrier_type_id = 2 then 1 else 0 end) video_digitised_nok,
sum(case when e.event_outcome = 1 and c.carrier_type_id = 4 then 1 else 0 end) film_digitised_ok,
sum(case when e.event_outcome = 0 and c.carrier_type_id = 4 then 1 else 0 end) film_digitised_nok
from ${ams.db.events} e
	join ${ams.db.carrier} c on c.id = e.carrier_id
where event_lookup_id = 5 AND carrier_id IN (
											select id
											from ${ams.db.carrier}
											where organization_id IN (
												#[flowVars.query_ams_organization_ids]
											)
										)]]></db:dynamic-query>
        </db:select>
                <logger message="AMS digitised av done" level="INFO" doc:name="Logger"/>
            </processor-chain>
             <processor-chain>
                <expression-component doc:name="Sleep 60"><![CDATA[Thread.sleep(60);]]></expression-component>
                <logger message="Start AMS digitised paper" level="INFO" doc:name="Logger"/>
<db:select config-ref="AMS_MySQL" doc:name="AMS: Fetch amount digitised for paper">
                    <db:dynamic-query><![CDATA[select sum(case when e.event_outcome = 1 then 1 else 0 end) paper_digitised_ok,
sum(case when e.event_outcome = 0 then 1 else 0 end) paper_digitised_nok
from ${ams.db.paper_event} e
where event_lookup_id = 5 and carrier_id IN (
											select id
											from ${ams.db.carrier}
											where organization_id IN (
												#[flowVars.query_ams_organization_ids]
											)
										)]]></db:dynamic-query>
        </db:select>
                <logger message="AMS digitised paper done" level="INFO" doc:name="Logger"/>
            </processor-chain>
        </scatter-gather>
        <dw:transform-message doc:name="Build nice JSON object">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
{
	"registered": {
		"video": payload[0][0].video_registered,
		"audio": payload[0][0].audio_registered,
		"film": payload[0][0].film_registered,	
		"paper": payload[0][0].paper_registered,
		"total": payload[0][0].total_registered
	},
	"archived": { (payload[1] map (
			{
				($.mime_type): {
					"amount": {
						"ok": $.archived_amount_ok,
						"nok": $.archived_amount_nok
					},
					"bytes": {
						"ok": $.archived_bytes_ok,
						"nok": $.archived_bytes_nok
					}
				}
			} when $.mime_type != null 
			otherwise {
				"unknown": {
					"amount": {
						"ok": $.archived_amount_ok,
						"nok": $.archived_amount_nok
					},
					"bytes": {
						"ok": $.archived_bytes_ok,
						"nok": $.archived_bytes_nok
					}
				}
			} 
			))
	},
	"digitised": {
		"video": {
			"ok": payload[2][0].video_digitised_ok,
			"nok": payload[2][0].video_digitised_nok
		},
		"audio": {
			"ok": payload[2][0].audio_digitised_ok,
			"nok": payload[2][0].audio_digitised_nok
		},
		"film": {
			"ok": payload[2][0].film_digitised_ok,
			"nok": payload[2][0].film_digitised_nok
		},
		"paper": {
			"ok": payload[3][0].paper_digitised_ok,
			"nok": payload[3][0].paper_digitised_nok
		},
		"total": {
			"ok": payload[2][0].video_digitised_ok + payload[2][0].audio_digitised_ok + payload[2][0].film_digitised_ok + payload[3][0].paper_digitised_ok,
			"nok": payload[2][0].video_digitised_nok + payload[2][0].audio_digitised_nok + payload[2][0].film_digitised_nok + payload[3][0].paper_digitised_nok
		}
	}	
}]]></dw:set-payload>
        </dw:transform-message>
        <byte-array-to-string-transformer doc:name="Byte Array to String"/>
        <logger level="INFO" doc:name="Logger"/>
        <catch-exception-strategy doc:name="Catch Exception Strategy">
            <logger message="Something went wrong" level="INFO" doc:name="Logger"/>
        </catch-exception-strategy>
    </flow>
    <sub-flow name="CalcAndAddMAMTotal">
    	<set-variable variableName="mamResult" value="#[payload]" doc:name="Set mamResult (without total)"/>
                <set-variable variableName="total_archived_amount_ok" value="#[0]" doc:name="Init total_archived_amount_ok"/>
                <set-variable variableName="total_archived_bytes_ok" value="#[0]" doc:name="Init total_archived_bytes_ok"/>
                <set-variable variableName="total_archived_amount_nok" value="#[0]" doc:name="Init total_archived_amount_nok"/>
                <set-variable variableName="total_archived_bytes_nok" value="#[0]" doc:name="Init total_archived_bytes_nok (0)"/>
                <foreach doc:name="For Each to calc totals">
                    <set-variable variableName="total_archived_amount_ok" value="#[flowVars.total_archived_amount_ok += payload.archived_amount_ok]" doc:name="Add to total_archived_amount_ok"/>
                    <set-variable variableName="total_archived_bytes_ok" value="#[flowVars.total_archived_bytes_ok += payload.archived_bytes_ok]" doc:name="Add to total_archived_bytes_ok"/>
                    <set-variable variableName="total_archived_amount_nok" value="#[flowVars.total_archived_amount_nok += payload.archived_amount_nok]" doc:name="Add to total_archived_amount_nok"/>
                    <set-variable variableName="total_archived_bytes_nok" value="#[flowVars.total_archived_bytes_nok += payload.archived_bytes_nok]" doc:name="Add to total_archived_amount_nok"/>
                </foreach>
                <component class="transformers.AddTotal" doc:name="Java"/>
    </sub-flow>
    <flow name="MAMitems">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/report/mam/items" allowedMethods="GET" doc:name="/api/report/mam/items?cp={c}&amp;gran={g}
"/>
        <set-variable variableName="cp" value="#[message.inboundProperties.'http.query.params'.org]" doc:name="Set cp"/>
        <set-variable variableName="cp" value="#['VRT']" doc:name="Set cp to VRT default"/>
        <logger level="INFO" doc:name="TODO: translate LDAP org ID to cp_name MAM"/>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'last-day':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
        <set-variable variableName="end" value="#[server.dateTime.getDate().toString()]" doc:name="Set end (now())"/>
        <set-variable variableName="endDateTime" value="#[server.dateTime.getDate()]" doc:name="Set endDateTime"/>
        <choice doc:name="Last-day, last-week, last-month or last-year?">
            <when expression="#[flowVars.granularity.equals('last-year')]">
                <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusYears(-1).toString()]" doc:name="Set start (now() - 1 year)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusYears(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch items">
                    <db:parameterized-query><![CDATA[SELECT distinct m.month x, case when (count(1) OVER (PARTITION BY m.month)) = 1 then 0 else count(1) OVER (PARTITION BY m.month) end y
FROM  (SELECT generate_series(date_trunc('month', min(date))
                            , max(date), '1 month') AS month FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('month', date) AS month FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (month)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[flowVars.granularity.equals('last-month')]">
                <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusMonths(-1).toString()]" doc:name="Set start (now() - 1 month)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusMonths(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch items">
                    <db:parameterized-query><![CDATA[SELECT distinct m.day x, case when (count(1) OVER (PARTITION BY m.day)) = 1 then 0 else count(1) OVER (PARTITION BY m.day) end y
FROM  (SELECT generate_series(date_trunc('day', min(date))
                            , max(date), '1 day') AS day FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('day', date) AS day FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (day)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[flowVars.granularity.equals('last-week')]">
                <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusWeeks(-1).toString()]" doc:name="Set start (now() - 1 week)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusWeeks(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch items">
                    <db:parameterized-query><![CDATA[SELECT distinct m.day x, case when (count(1) OVER (PARTITION BY m.day)) = 1 then 0 else count(1) OVER (PARTITION BY m.day) end y
FROM  (SELECT generate_series(date_trunc('day', min(date))
                            , max(date), '1 day') AS day FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('day', date) AS day FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (day)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="#[flowVars.granularity.equals('last-day')]">
                <logger message="Live data" level="INFO" doc:name="Last day = 24 hours for every 1 hour"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusDays(-1).toString()]" doc:name="Set start (now() - 1 day)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusDays(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch items">
                    <db:parameterized-query><![CDATA[SELECT distinct m.hour x, case when (count(1) OVER (PARTITION BY m.hour)) = 1 then 0 else count(1) OVER (PARTITION BY m.hour) end y
FROM  (SELECT generate_series(date_trunc('hour', min(date))
                            , max(date), '1 hour') AS hour FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('hour', date) AS hour FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (hour)
ORDER BY m.hour;]]></db:parameterized-query>
                </db:select>
                <!--  <component class="FixValues" doc:name="Fix array of values"/> -->
                
            </when>
            <otherwise>
                <logger message="Bad granularity, use live-data, 2-days, 1-month or 1-year" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>
    <flow name="MAMbytes">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/report/mam/bytes" allowedMethods="GET" doc:name="/api/report/mam/bytes?org={o}&amp;gran={g}"/>
        <set-variable variableName="cp" value="#[message.inboundProperties.'http.query.params'.org]" doc:name="Set cp"/>
        <set-variable variableName="cp" value="#['VRT']" doc:name="Set cp to VRT default"/>
        <logger level="INFO" doc:name="TODO: translate LDAP org ID to cp_name MAM"/>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'last-day':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
        <set-variable variableName="end" value="#[server.dateTime.getDate().toString()]" doc:name="Set end (now())"/>
        <set-variable variableName="endDateTime" value="#[server.dateTime.getDate()]" doc:name="Set endDateTime"/>
        <choice doc:name="Last-day, last-week, last-month or last-year?">
            <when expression="">
                <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusYears(-1).toString()]" doc:name="Set start (now() - 1 year)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusYears(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch bytes">
                    <db:parameterized-query><![CDATA[SELECT distinct m.month x, case when (sum(carrier_size) OVER (PARTITION BY m.month)) = 1 then 0 else sum(carrier_size) OVER (PARTITION BY m.month) end y
FROM  (SELECT generate_series(date_trunc('month', min(date))
                            , max(date), '1 month') AS month FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('month', date) AS month FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (month)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="">
                <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusMonths(-1).toString()]" doc:name="Set start (now() - 1 month)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusMonths(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch bytes">
                    <db:parameterized-query><![CDATA[SELECT distinct m.day x, case when (sum(carrier_size) OVER (PARTITION BY m.day)) = 1 then 0 else sum(carrier_size) OVER (PARTITION BY m.day) end y
FROM  (SELECT generate_series(date_trunc('day', min(date))
                            , max(date), '1 day') AS day FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('day', date) AS day FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (day)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="">
                <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusWeeks(-1).toString()]" doc:name="Set start (now() - 1 week)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusWeeks(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch bytes">
                    <db:parameterized-query><![CDATA[SELECT distinct m.day x, case when (sum(carrier_size) OVER (PARTITION BY m.day)) = 1 then 0 else sum(carrier_size) OVER (PARTITION BY m.day) end y
FROM  (SELECT generate_series(date_trunc('day', min(date))
                            , max(date), '1 day') AS day FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('day', date) AS day FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (day)
ORDER  BY 1;]]></db:parameterized-query>
                </db:select>
            </when>
            <when expression="">
                <logger message="Live data" level="INFO" doc:name="Last day = 24 hours for every 1 hour"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusDays(-1).toString()]" doc:name="Set start (now() - 1 day)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusDays(-1)]" doc:name="Set startDateTime"/>
                <db:select config-ref="Mediahaven_monitoring" doc:name="Fetch bytes">
                    <db:parameterized-query><![CDATA[SELECT distinct m.hour x, case when (sum(carrier_size) OVER (PARTITION BY m.hour)) = 1 then 0 else sum(carrier_size) OVER (PARTITION BY m.hour) end y
FROM  (SELECT generate_series(date_trunc('hour', min(date))
                            , max(date), '1 hour') AS hour FROM pids where date >= #[flowVars.start] AND date <= #[flowVars.end]
																	and content_provider LIKE #[flowVars.cp] 
																	AND status = 'OK') m
LEFT   JOIN (SELECT date_trunc('hour', date) AS hour FROM pids
															where date >= #[flowVars.start] AND date <= #[flowVars.end]
															and content_provider LIKE #[flowVars.cp] 
															AND status = 'OK') c
                                                        USING (hour)
ORDER BY m.hour;]]></db:parameterized-query>
                </db:select>
            </when>
            <otherwise>
                <logger message="Bad granularity, use live-data, 2-days, 1-month or 1-year" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>
    <flow name="AMSitems">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/report/ams/items" allowedMethods="GET" doc:name="/api/report/ams/items?org={o}&amp;gran={g}
"/>
        <set-variable variableName="cp" value="#[message.inboundProperties.'http.query.params'.org]" doc:name="Set cp"/>
        <set-variable variableName="cp" value="#['VRT']" doc:name="Set cp to VRT default"/>
        <logger level="INFO" doc:name="TODO: translate LDAP org ID to cp_name MAM"/>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'last-day':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
        <set-variable variableName="end" value="#[server.dateTime.getDate().toString()]" doc:name="Set end (now())"/>
        <set-variable variableName="endDateTime" value="#[server.dateTime.getDate()]" doc:name="Set endDateTime"/>
        <choice doc:name="Last-day, last-week, last-month or last-year?">
            <when expression="">
                <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusYears(-1).toString()]" doc:name="Set start (now() - 1 year)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusYears(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusMonths(-1).toString()]" doc:name="Set start (now() - 1 month)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusMonths(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusWeeks(-1).toString()]" doc:name="Set start (now() - 1 week)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusWeeks(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="Live data" level="INFO" doc:name="Last day = 24 hours for every 1 hour"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusDays(-1).toString()]" doc:name="Set start (now() - 1 day)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusDays(-1)]" doc:name="Set startDateTime"/>
            </when>
            <otherwise>
                <logger message="Bad granularity, use live-data, 2-days, 1-month or 1-year" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>
    <flow name="AMSbytes">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/api/report/ams/bytes" allowedMethods="GET" doc:name="/api/report/ams/bytes?org={o}&amp;gran={g}"/>
        <set-variable variableName="cp" value="#[message.inboundProperties.'http.query.params'.org]" doc:name="Set cp"/>
        <set-variable variableName="cp" value="#['VRT']" doc:name="Set cp to VRT default"/>
        <logger level="INFO" doc:name="TODO: translate LDAP org ID to cp_name MAM"/>
        <set-variable variableName="granularity" value="#[message.inboundProperties.'http.query.params'.gran==null?'last-day':message.inboundProperties.'http.query.params'.gran]" doc:name="Set granularity (todo better error catching)"/>
        <set-variable variableName="end" value="#[server.dateTime.getDate().toString()]" doc:name="Set end (now())"/>
        <set-variable variableName="endDateTime" value="#[server.dateTime.getDate()]" doc:name="Set endDateTime"/>
        <choice doc:name="Last-day, last-week, last-month or last-year?">
            <when expression="">
                <logger message="1 year" level="INFO" doc:name="1 year = last 12 months"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusYears(-1).toString()]" doc:name="Set start (now() - 1 year)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusYears(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="1 month" level="INFO" doc:name="1 month = last 30 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusMonths(-1).toString()]" doc:name="Set start (now() - 1 month)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusMonths(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="1 week" level="INFO" doc:name="1 week = last 7 days"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusWeeks(-1).toString()]" doc:name="Set start (now() - 1 week)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusWeeks(-1)]" doc:name="Set startDateTime"/>
            </when>
            <when expression="">
                <logger message="Live data" level="INFO" doc:name="Last day = 24 hours for every 1 hour"/>
                <set-variable variableName="start" value="#[server.dateTime.getDate().plusDays(-1).toString()]" doc:name="Set start (now() - 1 day)"/>
                <set-variable variableName="startDateTime" value="#[server.dateTime.getDate().plusDays(-1)]" doc:name="Set startDateTime"/>
            </when>
            <otherwise>
                <logger message="Bad granularity, use live-data, 2-days, 1-month or 1-year" level="INFO" doc:name="Bad granularity, use live-data, 2-days, 1-month or 1-year"/>
            </otherwise>
        </choice>
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <logger message="Done" level="INFO" doc:name="Done"/>
    </flow>
</mule>